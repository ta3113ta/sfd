service: unishop-payment-router-api

custom:
  corsBackend:
    origin: "*"
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false
  verifyTokenArns:
    dev: arn:aws:lambda:ap-southeast-1:153874506602:function:unishop-authorization-dev-verifyToken
    prod: arn:aws:lambda:ap-southeast-1:153874506602:function:unishop-authorization-prod-verifyToken
  useVerifyTokenArn: ${self:custom.verifyTokenArns.${self:provider.stage}}
  domains:
    dev: member-calls2-dev.unicity.com
    prod: member-calls2.unicity.com
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    stage: ${self:provider.stage}
    basePath: ${self:provider.environment.MODULE_KEY}
  hydraUrls:
    dev: https://hydraqa.unicity.net/v5a-test
    prod: https://hydra.unicity.net/v5a
  dbName:
    dev: calls-dev
    prod: calls
  stage:
    dev: dev
    prod: prod
  funcNameProductV2:
    dev: unishop-product-api-v2-prod-productGetPublish
    prod: unishop-product-api-v2-prod-productGetPublish
  funcNameFormatHydra:
    dev: unishop-format-api-dev-formatHydra
    prod: unishop-format-api-prod-formatHydra
  funcNameFormatAddress:
    dev: unishop-format-api-dev-formatAddress
    prod: unishop-format-api-prod-formatAddress
  funcNameOrderHistory:
    dev: unishop-etl-api-v2-prod-getOrdersHistory
    prod: unishop-etl-api-v2-prod-getOrdersHistory
  funcNameOrderDetail:
    dev: unishop-etl-api-v2-prod-getOrderDetail
    prod: unishop-etl-api-v2-prod-getOrderDetail
  funcNameGetArOrCash:
    dev: unishop-settings-api-prod-settingsGetOne
    prod: unishop-settings-api-prod-settingsGetOne
  schedule_00_01:
    dev: null
    prod: cron(0/2 * * * ? *)

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'ap-southeast-1'}
  stage: ${opt:stage, 'dev'}
  endpointType: regional
  apiName: unishop_${self:provider.environment.MODULE_KEY}_${self:provider.stage}
  deploymentBucket: ushop-serverless-applications
  versionFunctions: false
  environment:
    MODULE_KEY: payment_router
    DB_HOST: "calls.cluster-cgsbov623gbq.ap-southeast-1.rds.amazonaws.com"
    DB_USER: "ushopadmin"
    DB_PASSWORD: "tCPgtcamuGkTtYRx"
    DB_DBNAME: ${self:custom.dbName.${self:provider.stage}}
    FUNC_NAME_PRODUCT_V2: ${self:custom.funcNameProductV2.${self:provider.stage}}
    FUNC_NAME_FORMAT_HYDRA: ${self:custom.funcNameFormatHydra.${self:provider.stage}}
    FUNC_NAME_FORMAT_ADDRESS: ${self:custom.funcNameFormatAddress.${self:provider.stage}}
    FUNC_NAME_ORDER_HISTORY: ${self:custom.funcNameOrderHistory.${self:provider.stage}}
    FUNC_NAME_ORDER_DETAIL: ${self:custom.funcNameOrderDetail.${self:provider.stage}}
    FUNC_NAME_GET_AR_OR_CASH: ${self:custom.funcNameGetArOrCash.${self:provider.stage}}
    DO_MAIN_LINK: ${self:custom.domains.${self:provider.stage}}
    STAGE: ${self:custom.stage.${self:provider.stage}}
    API_URL_HYDRA: ${self:custom.hydraUrls.${self:provider.stage}}

  vpc:
    securityGroupIds:
      - sg-ce9a64a9
    subnetIds:
      - subnet-0602cca936c12ae26
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeAsync"
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:*:*:*"

functions:
  paymentValidate:
    handler: src/controllers/paymentControllers.paymentValidate
    events:
      - http:
          path: proxy/insert/{country_code}
          method: post
          cors: true
    timeout: 30
  paymentUpdate:
    handler: src/controllers/paymentControllers.paymentUpdate
    events:
      - http:
          path: proxy/update
          method: patch
          cors: true
    timeout: 30
  paymentLog:
    handler: src/controllers/paymentControllers.paymentLog
    events:
      - http:
          path: proxy/listener
          method: post
          cors: true
    timeout: 30
  paymentEcpay:
    handler: src/controllers/paymentControllers.paymentEcpay
    events:
      - http:
          path: /ecpay
          method: post
          cors: true
    timeout: 30
  paymentEcpayForward:
    handler: src/controllers/paymentControllers.paymentEcpayForward
    events:
      - http:
          path: /ecpay/forward
          method: post
          cors: true
    timeout: 30

  hydraEnrollCreatePayment:
    handler: src/controllers/hydraEnrollControllers.createPayment
    events:
      - http:
          path: hydra/enroll/{countryCode}
          method: post
          cors: true
    timeout: 30
  hydraShopCreatePayment:
    handler: src/controllers/hydraShopControllers.createPaymentShop
    events:
      - http:
          path: hydra/shop/{countryCode}
          method: post
          cors: true
    timeout: 30
  paymentHydraDetailAndUUID:
    handler: src/controllers/paymentDetailControllers.getDetailHydra
    events:
      - http:
          path: detail/hydra
          method: post
          cors: true
  paymentProxyDetailAndUUID:
    handler: src/controllers/paymentDetailControllers.getDetailProxy
    events:
      - http:
          path: detail/proxy
          method: post
          cors: true

  cronjobProxy:
    handler: src/controllers/cronJobsController.createOrder
    events:
      - schedule: ${self:custom.schedule_00_01.${self:provider.stage}}
    timeout: 900
  # cronjobProxy:
  #   handler: src/controllers/cronJobsController.createOrder
  #   events:
  #     - http:
  #         path: test/cronjob
  #         method: get
  #         cors: true
  #   timeout: 900


plugins:
  - serverless-domain-manager

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
